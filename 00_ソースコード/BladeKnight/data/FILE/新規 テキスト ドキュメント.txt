	//========================================
	//モーション読み込み
	//========================================
	while (1)
	{//文字列がEND_MOTIONSETになるまで繰り返す
		//不要なものを入れる
		fscanf(pFile, "%s", &garbage[0]);

		if (strcmp(&garbage[0], "END_MOTIONSET") == 0)
		{//文字列がEND_MOTIONSETの時
			//モーション番号を加算
			nMotion++;

			//抜け出す
			break;
		}

		if (strcmp(&garbage[0], "LOOP") == 0)
		{//文字列がLOOPの時
			//=捨てる
			fscanf(pFile, "%s", &garbage[0]);

			//モーションループするかしないか
			int MLoop = 0;

			fscanf(pFile, "%d", &MLoop);

			if (MLoop == 0)
			{//0だったらループしない
				m_aInfo[nMotion].bLoop = false;
			}
			else if (MLoop == 1)
			{//1だったらループする
				m_aInfo[nMotion].bLoop = true;
			}
		}

		if (strcmp(&garbage[0], "NUM_KEY") == 0)
		{//文字列がNUM_KEYの時
			//=捨てる
			fscanf(pFile, "%s", &garbage[0]);

			//ループするかどうか
			fscanf(pFile, "%d", &m_aInfo[nMotion].nNumKey);
		}

		if (strcmp(&garbage[0], "KEYSET") == 0)
		{//文字列がKEYSETの時

			//初期化
			nPartsIndex = 0;

			while (1)
			{//END_KEYSETが来るまで回す
				//不要なものを入れる
				fscanf(pFile, "%s", &garbage[0]);

				if (strcmp(&garbage[0], "END_KEYSET") == 0)
				{//文字列がEND_KEYSETの時

					//キー数加算
					nCntKey++;

					//抜け出す
					break;
				}

				//if (m_nNumModel >= MAX_MODEL)
				//{//パーツの数が最大値分を超えたら
				//	//抜け出す
				//	break;
				//}

				if (strcmp(&garbage[0], "FRAME") == 0)
				{//文字列がFRAMEの時
					fscanf(pFile, "%s", &garbage[0]);

					//モーションフレーム数
					fscanf(pFile, "%d", &m_aInfo[nMotion].aKeyInfo[nCntKey].nFrame);
				}

				if (strcmp(&garbage[0], "KEY") == 0)
				{//文字列がKEYの時
					while (1)
					{//END_KEYが来るまで回す
						//不要なものを入れる
						fscanf(pFile, "%s", &garbage[0]);

						if (strcmp(&garbage[0], "END_KEY") == 0)
						{//文字列がEND_KEYの時

							//加算
							nPartsIndex++;

							//抜け出す
							break;
						}

						if (strcmp(&garbage[0], "POS") == 0)
						{//文字列がPARENTの時
							fscanf(pFile, "%f", &pos.x);
							fscanf(pFile, "%f", &pos.y);
							fscanf(pFile, "%f", &pos.z);

							//位置を設定
							m_ppModel[nPartsIndex]->SetPosition(pos);

						}

						if (strcmp(&garbage[0], "ROT") == 0)
						{//文字列がPARENTの時
							fscanf(pFile, "%f", &rot.x);
							fscanf(pFile, "%f", &rot.y);
							fscanf(pFile, "%f", &rot.z);

							//向きを設定
							m_ppModel[nPartsIndex]->SetRot(rot);
						}
					}
				}
			}
		}
	}
